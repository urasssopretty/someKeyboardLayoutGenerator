from classKeyboardKey import *
from classKeyboardLayout import *
from layoutTest.textTest import charStats
import string


def getSortedCharacters(text, abc, shiftSpecialChars):
    characters = abc + ''.join(str(element) for element in list(shiftSpecialChars.keys()))
    charCounters = sorted(charStats(characters, text).items(), key=lambda x: x[1], reverse=True)

    return [el[0] for el in characters]


def getPosition(keyIndex):
    deltaX = [2, -10.75, -21.25]

    if keyIndex in range(0, 13):
        return [keyIndex + deltaX[0], 0.5]
    elif keyIndex in range(13, 24):
        return [keyIndex + deltaX[1], 1.5]
    elif keyIndex in range(24, 35):
        return [keyIndex + deltaX[2], 2.5]

    return [-999, -999]

    # deltaX = [2, -10.75, -21.25]
    # print(keyIndex)
    # indexRanges = [list(range(0, 13)), list(range(13, 24)), list(range(24, 35))]
    #
    # for index in range(len(indexRanges)):
    #     if keyIndex in indexRanges[index]:
    #         return [keyIndex + deltaX[index], index + .5]
    #
    # return [-999, -999]


def getFinger(position):
    xPosition = int(position[0])

    if xPosition in (list(range(2, 6)) + list(range(8, 11))):
        return int(xPosition - 1)
    elif xPosition == 6:
        return 4
    elif xPosition == 7:
        return 7
    elif xPosition in range(11, 16):
        return 10

    return -1


def getKeyId(lenOfKeys):
    delta = [15, 16, 18]

    if lenOfKeys in range(0, 13):
        return lenOfKeys + 15
    elif lenOfKeys in range(13, 24):
        return lenOfKeys + 16
    elif lenOfKeys in range(24, 34):
        return lenOfKeys + 18


def generateKeys(text, abc):
    shiftSpecialChars = {
        "[": "{",
        "]": "}",
        "\\": "|",
        ";": ":",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?"
    }

    sortedCharacters = getSortedCharacters(text, abc, shiftSpecialChars)

    keys = []

    for index in range(len(sortedCharacters)):
        char = sortedCharacters[index]
        position = getPosition(index)

        keys.append(
            {
                "primary": ord(char),
                "shift": ord(char.upper() if (char not in shiftSpecialChars.keys()) else shiftSpecialChars[char]),
                "position": position,
                "finger": getFinger(position),
                "id": getKeyId(len(keys))
            }
        )

    print(keys)
    return keys


def generateStartKeys(keys):
    homeRow = [key for key in keys if key["position"][1] == 1.5]
    result = {}

    for index in range(10):
        if index in range (0, 4):
            result[index] = homeRow[index]["id"]
        elif index in range(7, 11):
            result[index - 3] = homeRow[index]["id"]

    return result


def mathLayoutGenerator(textFileName, keyboardType, abc=string.ascii_lowercase):

    if keyboardType != "standard":
        raise Exception("non standard keyboard type currently dont supports")

    layoutDict = {
        "label": "layout generated by layout generator by keyboard layout generator by urasssopretty",
        "keyboardType": keyboardType
    }

    text = open(textFileName).read().lower().replace(" ", "")

    layoutDict["keys"] = generateKeys(text, abc)

    layoutDict["fingerStart"] = generateStartKeys(layoutDict["keys"])

    return KeyboardLayout(layoutDict)


# rows = [[] for _ in range(3)]
# for key in keys:
#     match key["position"][1]:
#         case 0.5:
#             rows[0].append(key)
#         case 1.5:
#             rows[1].append(key)
#         case 2.5:
#             rows[2].append(key)
# for row in rows:
#     for key in sorted(row, key=lambda d: d["position"][0]):
#         print(key["primary"], key["position"], key["id"])
#     print()

