from classKeyboardLayout import *
from layoutTest.textTest import charStats
import string


def generateSortedCharacters(text, abc, shiftSpecialCharsDict):
    # characters = abc + " " + ''.join(str(specialChar) for specialChar in list(shiftSpecialChars.keys()))
    characters = abc + ''.join(str(specialChar) for specialChar in list(shiftSpecialCharsDict.keys()))
    charCounters = sorted(charStats(characters, text).items(), key=lambda x: x[1], reverse=True)

    return [charAndCounter[0] for charAndCounter in charCounters]


def generatePositions(sortedChars):
    result = []
    deltaX = [2, -10.75, -21.25]

    for index in range(len(sortedChars)):
        if index in range(0, 13):
            result.append([index + deltaX[0], 0.5])
        elif index in range(13, 24):
            result.append([index + deltaX[1], 1.5])
        elif index in range(24, 35):
            result.append([index + deltaX[2], 2.5])
        else:
            result.append([-999, -999])

    return result


def generateFingers(positions):
    result = []

    for position in positions:
        xPosition = int(position[0])

        if xPosition in (list(range(2, 6)) + list(range(8, 11))):
            result.append(int(xPosition - 1))
        elif xPosition == 6:
            result.append(4)
        elif xPosition == 7:
            result.append(7)
        elif xPosition in range(11, 16):
            result.append(10)
        else:
            result.append(-1)

    return result


def generateKeyIds(characters):
    result = []
    delta = [15, 16, 18]

    for index in range(len(characters)):
        if index in range(0, 13):
            result.append(index + 15)
        elif index in range(13, 24):
            result.append(index + 16)
        elif index in range(24, 34):
            result.append(index + 18)
        else:
            result.append(-1)

    return result


def generateKeys(text, abc):
    shiftSpecialChars = {
        "[": "{",
        "]": "}",
        "\\": "|",
        ";": ":",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?"
    }

    sortedCharacters = generateSortedCharacters(text, abc, shiftSpecialChars)

    primaries = []
    shifts = []

    for index in range(len(sortedCharacters)):
        char = sortedCharacters[index]

        primaries.append(ord(char))
        shifts.append(ord(char.upper() if (char not in shiftSpecialChars.keys()) else shiftSpecialChars[char]))

    positions = generatePositions(sortedCharacters)
    fingerIds = generateFingers(positions)
    keysId = generateKeyIds(sortedCharacters)

    keys = []
    for index in range(len(sortedCharacters)):
        keys.append(
            {
                "primary": primaries[index],
                "shift": shifts[index],
                "position": positions[index],
                "finger": fingerIds[index],
                "id": keysId[index]
            }
        )

    ### TODO find the way to remove it
    # this is SPACE BAR
    keys.append(
        {
            "primary": 32,
            "finger": 5,
            "id": 56
        },
    )

    # print(keys)
    return keys


def generateStartKeys(keys):
    homeRow = [keyDict for keyDict in keys if "position" in keyDict.keys() and keyDict["position"][1] == 1.5]
    result = {}

    for index in range(10):
        if index in (list(range(0, 4)) + list(range(6, 10))):
            result[str(index + 1)] = homeRow[index]["id"]
        elif index in (4, 5):
            result[str(index + 1)] = 56

    return result


def mathLayoutGenerator(textFileName, keyboardType, abc=string.ascii_lowercase):
    if keyboardType != "standard":
        raise Exception("non standard keyboard type currently dont supports")

    text = open(textFileName).read().lower().replace(" ", "")

    keys = generateKeys(text, abc)
    layoutDict = {
        "label": "layout generated by layout generator by keyboard layout generator by urasssopretty",
        "keyboardType": keyboardType,
        "keys": keys,
        "fingerStart": generateStartKeys(keys)
    }

    return KeyboardLayout(layoutDict)
