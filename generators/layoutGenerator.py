from classKeyboardKey import *
from layoutTest.textTest import charStats
import string


def getPosition(index):
    # deltaX = [13, 26.75, 39.25]
    # idRanges = [list(range(15, 28)), list(range(29, 40)), list(range(42, 52))]
    #
    # for someIndex in range(len(idRanges)):
    #     if index in idRanges[someIndex]:
    #         return [index - deltaX[someIndex], someIndex - 0.5]

    if index in range(0, 13):
        return [2 + index, 0.5]
    elif index in range(13, 24):
        return [2.25 + index - 13, 1.5]
    elif index in range(24, 35):
        return [2.75 + index - 23, 2.5]

    return [-999, -999]


def generateKeys(text, abc):
    shiftSpecialChars = {
        "[": "{",
        "]": "}",
        "\\": "|",
        ";": ":",
        "'": "\"",
        ",": "<",
        ".": ">",
        "/": "?"
    }

    sortedCharacters = getSortedCharacters(text, abc, shiftSpecialChars)

    keys = []

    for index in range(len(sortedCharacters)):
        char = sortedCharacters[index]
        position = getPosition(index)

        print(char, position, index)

        keys.append(
            Key(
                {
                    "primary": ord(char),
                    "shift": ord(char.upper() if (char not in shiftSpecialChars.keys()) else shiftSpecialChars[char]),
                    "finger": 0,
                    "id": 0
                }
            )
        )

    return keys


def getSortedCharacters(text, abc, shiftSpecialChars):
    characters = abc + ''.join(str(element) for element in list(shiftSpecialChars.keys()))
    charCounters = sorted(charStats(characters, text).items(), key=lambda x: x[1], reverse=True)

    return [el[0] for el in characters]


def mathLayoutGenerator(textFileName, keyboardType, abc=string.ascii_lowercase):
    if keyboardType != "standard":
        raise Exception("non standard keyboard type currently dont supports")

    layoutDict = {
        "label": "layout generated by layout generator by keyboard layout generator by urasssopretty",
        "keyboardType": keyboardType
    }

    text = open(textFileName).read().lower().replace(" ", "")

    layoutDict["keys"] = generateKeys(text, abc)

    # for key in layoutDict["keys"]:
    #     print(key.getPrimaryChar())

    # return keyboardLayout()
    return 0

# from operator import itemgetter
# from classKeyboardLayout import *
# from classKeyboardKey import *
# from layoutTest.textTest import *
# import string
#
#
# def getOrderedPositions(index):
#     listOfPositions = [
#         (5.25, 1.5),
#         (8.25, 1.5),
#         (4.25, 1.5),
#         (9.25, 1.5),
#         (3.25, 1.5),
#         (10.25, 1.5),
#         (2.25, 1.5),
#         (11.25, 1.5),
#         (6.25, 1.5),
#         (7.25, 1.5),
#         (3, 0.5),
#         (4, 0.5),
#         (5, 0.5),
#         (6, 0.5),
#         (8, 0.5),
#         (9, 0.5),
#         (10, 0.5),
#         (12.25, 1.5),
#         (4.75, 2.5),
#         (5.75, 2.5),
#         (6.75, 2.5),
#         (7.75, 2.5),
#         (8.75, 2.5),
#         (2.75, 2.5),
#         (3.75, 2.5),
#         (7, 0.5),
#         (11, 0.5),
#         (12, 0.5),
#         (13, 0.5),
#         (14, 0.5),
#         (2, 0.5),
#         (9.75, 2.5),
#         (10.75, 2.5),
#         (11.75, 2.5),
#     ]
#
#     return listOfPositions[index]
#
#
# def getKeyPosition(charCounters, character):
#     for index in range(len(charCounters)):
#         if charCounters[index][0] == character:
#             return getOrderedPositions(index)
#
#
# def setKeysId(keys):
#     for index in range(len(keys)):
#         keys[index]["id"] = index
#
#     return keys
#
# ### TODO REWRITE IT because key id must be in order from first to last but not like this
# # def getKeyId(charCounters, char):
#     # for pairIndex in range(len(charCounters)):
#     #     if charCounters[pairIndex][0] == char:
#     #         return pairIndex
#     #
#     # raise Exception("character in not declared!!!! | error: math based generator in getKeyID", char, "\n", charCounters)
#
#
# def getFingerIndex(position, keys):
#     xvalue = position[0]
#
#     if int(xvalue) in (list(range(2, 6))) + list(range(8, 11)):
#         return int(xvalue - 1)
#     elif int(xvalue) == 6:
#         return 4
#     elif int(xvalue) == 7:
#         return 7
#     elif int(xvalue) in range(11, 16):
#         return 10
#
#
# def generateKeys(text, abc):
#     shiftSpecialChars = {
#         "[": "{",
#         "]": "}",
#         "\\": "|",
#         ";": ":",
#         "'": "\"",
#         ",": "<",
#         ".": ">",
#         "/": "?"
#     }
#
#     characters = abc + ''.join(str(element) for element in list(shiftSpecialChars.keys()))
#     charCounters = sorted(charStats(characters, text).items(), key=lambda x: x[1], reverse=True)
#
#     keys = []
#
#     for char in characters:
#         keyPosition = getKeyPosition(charCounters, char)
#         keys.append(
#             {
#                 "primary": char,
#                 "shift": shiftSpecialChars[char] if (char in shiftSpecialChars.keys()) else char.upper(),
#                 "position": keyPosition,
#                 "id": 0,
#                 # "id": getKeyId(charCounters, char, keyPosition),
#                 "finger": getFingerIndex(keyPosition, keys)
#             }
#         )
#
#     return keys
#
#
# def mathLayoutGenerator(textFileName, keyboardType, abc=string.ascii_lowercase):
#     if keyboardType != "standard":
#         raise Exception("HEY NOW ANOTHER KEYBOARD TYPE UNSUPPORTED | ERROR IN MATH BASED KEYB GENERATOR")
#
#     text = open(textFileName).read().lower().replace(" ", "")
#
#     label = "layout generated by math based keyboard layout generated v0.4"
#     keyboardType = "standard"
#     keys = generateKeys(text, abc)
#     keys = setKeysId(keys)
#
#     for key in keys:
#         print(key["id"], key["position"])

    # rows = [[] for _ in range(3)]
    # for key in keys:
    #     match key["position"][1]:
    #         case 0.5:
    #             rows[0].append(key)
    #         case 1.5:
    #             rows[1].append(key)
    #         case 2.5:
    #             rows[2].append(key)
    # for row in rows:
    #     for key in sorted(row, key=lambda d: d["position"][0]):
    #         print(key["primary"], key["position"], key["id"])
    #     print()

    # return KeyboardLayout()

